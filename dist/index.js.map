{
  "version": 3,
  "sources": ["../lib/dnansumpw.js", "../lib/ndarray.js", "../lib/dnanmeanpw.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of a double-precision floating-point strided array elements, ignoring `NaN` values and using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783\u201399. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} out - two-element output array whose first element is the accumulated sum and whose second element is the accumulated number of summed values\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {NumericArray} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var out = [ 0.0, 0 ];\n* var v = dnansumpw( N, out, x, 2, 1 );\n* // returns [ 5.0, 4 ]\n*/\nfunction dnansumpw( N, out, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn out;\n\t\t}\n\t\tout[ 0 ] += x[ offset ];\n\t\tout[ 1 ] += 1;\n\t\treturn out;\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = 0.0;\n\t\ts1 = 0.0;\n\t\ts2 = 0.0;\n\t\ts3 = 0.0;\n\t\ts4 = 0.0;\n\t\ts5 = 0.0;\n\t\ts6 = 0.0;\n\t\ts7 = 0.0;\n\t\tn = 0;\n\n\t\tM = N % 8;\n\t\tfor ( i = 0; i < N-M; i += 8 ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts0 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts1 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts2 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts3 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts4 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts5 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts6 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts7 += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ((s0+s1) + (s2+s3)) + ((s4+s5) + (s6+s7));\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tout[ 0 ] += s;\n\t\tout[ 1 ] += n;\n\t\treturn out;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn dnansumpw( n, out, x, stride, ix ) + dnansumpw( N-n, out, x, stride, ix+(n*stride) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnansumpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dnansumpw = require( './dnansumpw.js' );\n\n\n// VARIABLES //\n\nvar WORKSPACE = [ 0.0, 0 ];\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array, ignoring `NaN` values and using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanmeanpw( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction dnanmeanpw( N, x, stride, offset ) {\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tdnansumpw( N, WORKSPACE, x, stride, offset );\n\treturn WORKSPACE[ 0 ] / WORKSPACE[ 1 ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanmeanpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar mean = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array, ignoring `NaN` values and using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanmeanpw( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction dnanmeanpw( N, x, stride ) {\n\tvar ix;\n\tvar v;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tn = 0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = x[ ix ];\n\t\t\tif ( v === v ) {\n\t\t\t\ts += v;\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t\tix += stride;\n\t\t}\n\t\tif ( n === 0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn s / n;\n\t}\n\treturn mean( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanmeanpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dnanmeanpw = require( './dnanmeanpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnanmeanpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnanmeanpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a double-precision floating-point strided array, ignoring `NaN` values and using pairwise summation.\n*\n* @module @stdlib/stats-base-dnanmeanpw\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnanmeanpw = require( '@stdlib/stats-base-dnanmeanpw' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = 3;\n*\n* var v = dnanmeanpw( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dnanmeanpw = require( '@stdlib/stats-base-dnanmeanpw' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanmeanpw.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dnanmeanpw;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdnanmeanpw = main;\n} else {\n\tdnanmeanpw = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanmeanpw;\n\n// exports: { \"ndarray\": \"dnanmeanpw.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_dnansumpw", "__commonJSMin", "exports", "module", "isnan", "floor", "BLOCKSIZE", "dnansumpw", "N", "out", "x", "stride", "offset", "ix", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "M", "s", "n", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "dnansumpw", "WORKSPACE", "dnanmeanpw", "N", "x", "stride", "offset", "require_dnanmeanpw", "__commonJSMin", "exports", "module", "mean", "dnanmeanpw", "N", "x", "stride", "ix", "v", "s", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dnanmeanpw", "ndarray", "join", "tryRequire", "isError", "main", "dnanmeanpw", "tmp"]
}
