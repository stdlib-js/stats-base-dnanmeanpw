{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dnanmeanpw.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dnannsumpw } from '@stdlib/blas-ext-base-dnannsumpw';\nimport Float64Array from '@stdlib/array-float64';\n\n\n// VARIABLES //\n\nvar WORKSPACE = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array, ignoring `NaN` values and using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n*\n* var v = dnanmeanpw( 5, x, 2, 1 );\n* // returns 1.25\n*/\nfunction dnanmeanpw( N, x, strideX, offsetX ) {\n\tWORKSPACE[ 0 ] = 0.0;\n\tWORKSPACE[ 1 ] = 0;\n\tdnannsumpw( N, x, strideX, offsetX, WORKSPACE, 1, 0 );\n\treturn WORKSPACE[ 0 ] / WORKSPACE[ 1 ];\n}\n\n\n// EXPORTS //\n\nexport default dnanmeanpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a double-precision floating-point strided array, ignoring `NaN` values and using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = dnanmeanpw( x.length, x, 1 );\n* // returns ~0.3333\n*/\nfunction dnanmeanpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default dnanmeanpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dnanmeanpw from './dnanmeanpw.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dnanmeanpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dnanmeanpw;\n"],"names":["WORKSPACE","Float64Array","dnanmeanpw","N","x","strideX","offsetX","dnannsumpw","ndarray","stride2offset","setReadOnly"],"mappings":";;maA4BA,IAAIA,EAAY,IAAIC,EAAc,GAsBlC,SAASC,EAAYC,EAAGC,EAAGC,EAASC,GAInC,OAHAN,EAAW,GAAM,EACjBA,EAAW,GAAM,EACjBO,EAAYJ,EAAGC,EAAGC,EAASC,EAASN,EAAW,EAAG,GAC3CA,EAAW,GAAMA,EAAW,EACpC,CCXA,SAASE,EAAYC,EAAGC,EAAGC,GAC1B,OAAOG,EAASL,EAAGC,EAAGC,EAASI,EAAeN,EAAGE,GAClD,CCjBAK,EAAAR,EAAA,UAAAM"}